# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

import data.contour.resources

# Ensure that cert-manager is installed.
# Version check the certificates resource.

Group := "cert-manager.io"
Version := "v1"

have_certmanager_version {
  v := resources.versions["certificates"]
  v[_].Group == Group
  v[_].Version == Version
}

skip[msg] {
  not resources.is_supported("certificates")
  msg := "cert-manager is not installed"
}

skip[msg] {
  not have_certmanager_version

  avail := resources.versions["certificates"]

  msg := concat("\n", [
    sprintf("cert-manager version %s/%s is not installed", [Group, Version]),
    "available versions:",
    yaml.marshal(avail)
  ])
}

---

# Create a self-signed issuer to give us secrets.

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
spec:
  selfSigned: {}

---
# Create an ingress-conformance-echo deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-one

---

# Create a service for ingress-conformance-echo


apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-one

---

# Request a cert for echo-one, stored in echo-one

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: echo-one-cert
spec:
  dnsNames:
  - echo-one.projectcontour.io
  secretName: echo-one
  issuerRef:
    name: selfsigned

---

# Set up a proxy for echo-one

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-one
spec:
  virtualhost:
    fqdn: echo-one.projectcontour.io
    tls:
      secretName: echo-one
  routes:
  - services:
    - name: echo-one
      port: 80

---

# ensure the echo-one proxy got set up

import data.contour.resources

fatal_proxy_is_not_present[msg] {
  not resources.is_present("httpproxies", "echo-one")
  msg := sprintf("HTTPProxy %q is not present", [ "echo-one" ])
}

---

# ensure the echo-one proxy got processed

import data.contour.resources

fatal_proxy_is_not_valid[msg] {
  status := resources.status("httpproxies", "echo-one")
  resultStatus := object.get(status, "currentStatus", "not-present")

  not resultStatus == "valid"

  msg := sprintf("HTTP proxy %q status is %q\n%s", [
    "echo-one", resultStatus, yaml.marshal(status)
  ])
}

---

## hang here
# make a request, confirm we got a 200

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response

Service := "echo-one"

Response := client.Get({
  "url": url.https(sprintf("/https-sni-enforcement/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-one.projectcontour.io",
    "User-Agent": client.ua("https-sni-enforcement"),
  },
  "tls_insecure_skip_verify": true,
})

error_no_response {
  not Response
}

error_non_200_response [msg] {
  not response.status_is(Response, 200)

  msg :=  sprintf("got status %d, wanted %d", [
    response.status_code(Response), 200
  ])
}

error_wrong_routing[msg] {
  not response.service(Response) == Service

  msg :=  sprintf("got wrong service %q, wanted %q", [
    response.service(Response), Service,
  ])
}

---

# set up echo-two ingress-conformance-echo deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-two

---

# set up service for echo-two ingress-conformance-echo deployment

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-two

---

# request a cert for echo-two, stored in the echo-two secret

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: echo-two-cert
spec:
  dnsNames:
  - echo-two.projectcontour.io
  secretName: echo-two
  issuerRef:
    name: selfsigned

---

# create an echo-two proxy

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-two
spec:
  virtualhost:
    fqdn: echo-two.projectcontour.io
    tls:
      secretName: echo-two
  routes:
  - services:
    - name: echo-two
      port: 80

---

# ensure the proxy got created

import data.contour.resources

fatal_proxy_is_not_present[msg] {
  not resources.is_present("httpproxies", "echo-two")
  msg := sprintf("HTTPProxy %q is not present", [ "echo-two" ])
}

---

# ensure the proxy got processed

import data.contour.resources

fatal_proxy_is_not_valid[msg] {
  status := resources.status("httpproxies", "echo-two")
  resultStatus := object.get(status, "currentStatus", "not-present")

  not resultStatus == "valid"

  msg := sprintf("HTTP proxy %q status is %q\n%s", [
    "echo-two", resultStatus, yaml.marshal(status)
  ])
}

---

# make a request to echo-two

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Service := "echo-two"

Response := client.Get({
  "url": url.https(sprintf("/https-sni-enforcement/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-two.projectcontour.io",
    "User-Agent": client.ua("https-sni-enforcement"),
  },
  "tls_insecure_skip_verify": true,
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_service_routing [msg] {
  msg := expect.response_service_is(Response, Service)
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response

# Ensure that sending a request to "echo-one" with the SNI from "echo-two"
# generates a 4xx response status.

Response := client.Get({
  "url": url.https(sprintf("/https-sni-enforcement/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-one.projectcontour.io",
    "User-Agent": client.ua("https-sni-enforcement"),
  },
  "tls_insecure_skip_verify": true,
  "tls_server_name": "echo-two.projectcontour.io",
})

error_non_400_response [msg] {
  not response.is_4xx(Response)
  msg :=  sprintf("got status %d, wanted 4xx", [ Response.status_code ])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response

# Ensure that sending a request to "echo-two" with the SNI from "echo-one"
# generates a 4xx response status.

Response := client.Get({
  "url": url.https(sprintf("/https-sni-enforcement/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-two.projectcontour.io",
    "User-Agent": client.ua("https-sni-enforcement"),
  },
  "tls_insecure_skip_verify": true,
  "tls_server_name": "echo-one.projectcontour.io",
})

check_for_status_code [msg] {
  not response.is_4xx(Response)
  msg :=  sprintf("got status %d, wanted 4xx", [ Response.status_code ])
}
