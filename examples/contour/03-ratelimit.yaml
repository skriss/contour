---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ratelimit
  name: ratelimit
  namespace: projectcontour
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # This value of maxSurge means that during a rolling update
      # the new ReplicaSet will be created first.
      maxSurge: 50%
  selector:
    matchLabels:
      app: ratelimit
  template:
    metadata:
      labels:
        app: ratelimit
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: ratelimit
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - 
        name: redis
        image: redis:alpine
        env:
          - name: REDIS_SOCKET_TYPE
            value: tcp
          - name: REDIS_URL
            value: redis:6379
      - 
        name: ratelimit
        image: steveheptio/ratelimit:latest
        ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8081
            name: grpc
            protocol: TCP
        volumeMounts:
          - name: ratelimit-config
            mountPath: /ratelimit-config
            readOnly: true
        env:
          - name: USE_STATSD
            value: "false"
          - name: LOG_LEVEL
            value: debug
          - name: REDIS_SOCKET_TYPE
            value: tcp
          - name: REDIS_URL
            value: localhost:6379
          - name: RUNTIME_ROOT
            value: /data
          - name: RUNTIME_SUBDIRECTORY
            value: ratelimit
          - name: RUNTIME_WATCH_ROOT
            value: "false"
        # These shenanigans are needed because Lyft's runtime lib doesn't play
        # nice with how Kubernetes mounts config maps into pods as volumes. So
        # we mount the config map into a separate location, then copy the file
        # into the location Lyft expects.
        command: ["/bin/sh","-c"]
        args: ["mkdir -p /data/ratelimit/config && cp /ratelimit-config/ratelimit-config.yaml /data/ratelimit/config/ratelimit-config.yaml && /bin/ratelimit"]
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
        - name: ratelimit-config  
          configMap:
            name: ratelimit-config
---
apiVersion: v1
kind: Service
metadata:
  name: ratelimit
  namespace: projectcontour
spec:
  ports:
  - port: 8081
    name: grpc
    protocol: TCP
  selector:
    app: ratelimit
  type: ClusterIP
